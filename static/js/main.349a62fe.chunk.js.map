{"version":3,"sources":["assets/inst.png","components/Home.js","components/Name.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","theme","margin","spacing","width","btn","formControl","button","App","useState","start","name","score","finish","state","console","log","className","style","display","justifyContent","alignItems","textAlign","flexDirection","fontSize","marginTop","href","textDecoration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,uICMzBC,YAAW,CAC5BC,KAAM,CACLC,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,Y,qBCHOR,aAAW,SAACS,GAAD,MAAY,CACxCR,KAAM,CACL,QAAS,CACRS,OAAQD,EAAME,QAAQ,GACtBC,MAAO,SAGTC,IAAK,CACJX,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,c,0CCbOR,aAAW,SAACS,GAAD,MAAY,CACxCK,YAAa,CACZJ,OAAQD,EAAME,QAAQ,IAEvBI,OAAQ,CACPL,OAAQD,EAAME,QAAQ,EAAG,EAAG,EAAG,Q,YCNfX,YAAW,CAC5BC,KAAM,CACLC,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,YCiEIQ,MA5Ef,WAAgB,IAAD,EACYC,mBAAS,CAClCC,OAAO,EACPC,KAAM,GACNC,MAAO,EACPC,QAAQ,IALK,mBACPC,EADO,KA8Bd,OA9Bc,KAiBdC,QAAQC,IAAIF,GAcX,oCACC,yBACCG,UAAU,MACVC,MAAO,CACNC,QAAS,OACTpB,OAAQ,OACRK,MAAO,OACPgB,eAAgB,SAChBC,WAAY,SACZvB,MAAO,QACPwB,UAAW,SACXC,cAAe,SACfC,SAAU,SAXZ,8EAgBC,yBACCN,MAAO,CACNxB,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,SACTsB,UAAW,SACXG,UAAW,OACXJ,WAAY,SACZD,eAAgB,SAChBD,QAAS,SAGV,uBACCO,KAAK,kCACLR,MAAO,CAAES,eAAgB,OAAQ7B,MAAO,UAFzC,kBC5De8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.349a62fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inst.a2b9ce59.png\";","import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles({\n\troot: {\n\t\tbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n\t\tborder: 0,\n\t\tborderRadius: 3,\n\t\tboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n\t\tcolor: 'white',\n\t\theight: 48,\n\t\tpadding: '0 30px',\n\t},\n})\n\nconst Home = (props) => {\n\tconst [count, setCount] = useState('Many')\n\tconst classes = useStyles()\n\n\tconst startQuiz = () => {\n\t\tprops.start({ start: true })\n\t}\n\n\tuseEffect(() => {\n\t\tfetch('https://limitless-cliffs-33100.herokuapp.com/howmany')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCount(data.count + '+')\n\t\t\t})\n\t\t\t.catch((err) => console.log(err))\n\t}, [])\n\n\tconst loading = (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\theight: '100%',\n\t\t\t\twidth: '100%',\n\t\t\t\tbackgroundColor: 'rgb(255,255,255)',\n\t\t\t\tdisplay: 'flex',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\talignItems: 'center',\n\t\t\t}}\n\t\t>\n\t\t\t{' '}\n\t\t\t<img src={require('../assets/inst.png')} alt=\"loading\" style={{\n\t\t\t\theight: '14vh',\n\t\t\t\twidth: '14vh',\n\t\t\t}} />\n\t\t</div>\n\t)\n\n\treturn (\n\t\t<>\n\t\t\t{count === 'Many' ? (\n\t\t\t\tloading\n\t\t\t) : (\n\t\t\t\t<Container>\n\t\t\t\t\t<Grid container spacing={3} alignItems='center'>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<h1 style={{ color: 'white', fontSize: '30px' }}>\n\t\t\t\t\t\t\t\tTake up the quiz for Covid-19 awareness. Let's Join the chain to\n\t\t\t\t\t\t\t\tbuild unity and strengthen the community together.\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t{count} have already taken the quiz\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Button onClick={startQuiz} className={classes.root}>\n\t\t\t\t\t\t\t\tTake quiz now\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\n\nfunction Alert(props) {\n\treturn <MuiAlert elevation={6} variant='filled' {...props} />\n}\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\t'& > *': {\n\t\t\tmargin: theme.spacing(5),\n\t\t\twidth: '25ch',\n\t\t},\n\t},\n\tbtn: {\n\t\tbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n\t\tborder: 0,\n\t\tborderRadius: 3,\n\t\tboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n\t\tcolor: 'white',\n\t\theight: 48,\n\t\tpadding: '0 30px',\n\t},\n}))\n\nconst Name = (props) => {\n\tconst classes = useStyles()\n\tconst [name, setName] = useState('')\n\tconst [open, setOpen] = React.useState(false)\n\n\tconst handleName = (e) => {\n\t\tsetName(e.target.value)\n\t}\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn\n\t\t}\n\t\tsetOpen(false)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Snackbar\n\t\t\t\topen={open}\n\t\t\t\tautoHideDuration={6000}\n\t\t\t\tanchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t<Alert onClose={handleClose} severity='error'>\n\t\t\t\t\ttype your name\n\t\t\t\t</Alert>\n\t\t\t</Snackbar>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<TextField\n\t\t\t\t\tid='outlined-secondary'\n\t\t\t\t\tlabel='Name'\n\t\t\t\t\tvariant='filled'\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={handleName}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\twidth: '40vw'\n\t\t\t\t\t}}\n\t\t\t\t\tInputProps={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tcolor: 'black',\n\t\t\t\t\t\t\tbackgroundColor: 'white'\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.log('uwu')\n\n\t\t\t\t\t\tif (name.trim().length === 0) {\n\t\t\t\t\t\t\tsetOpen(true)\n\t\t\t\t\t\t} else props.setName({ name })\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginTop: '35px',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName={classes.btn}\n\t\t\t\t>\n\t\t\t\t\tTake quiz now\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default Name\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\n\nimport data from '../data/main'\n\nconst useStyles = makeStyles((theme) => ({\n\tformControl: {\n\t\tmargin: theme.spacing(3),\n\t},\n\tbutton: {\n\t\tmargin: theme.spacing(1, 1, 0, 0),\n\t},\n}))\n\nexport default function Quiz(props) {\n\tconst classes = useStyles()\n\tconst [value, setValue] = React.useState('')\n\tconst [score, setScore] = React.useState(0)\n\tconst [index, setIndex] = React.useState(0)\n\n\tconst handleRadioChange = (event) => {\n\t\tsetValue(event.target.value)\n\t}\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tsetValue('')\n\n\t\tif (value + '' === data.answers[index] + '') {\n\t\t\tsetScore((score) => score + 1)\n\t\t\tprops.handler({ score: score + 1 })\n\t\t}\n\n\t\tif (index === data.questions.length - 1) {\n\t\t\tprops.handler({ finish: true })\n\t\t}\n\n\t\tsetIndex((index) => index + 1)\n\t}\n\n\treturn (\n\t\t<Paper\n\t\t\televation={3}\n\t\t\tstyle={{ padding: '8px',width: '75%', marginBottom: '70px' }}\n\t\t>\n\t\t\t<form onSubmit={handleSubmit} style={{}}>\n\t\t\t\t<FormControl component='fieldset' className={classes.formControl}>\n\t\t\t\t\t<FormLabel\n\t\t\t\t\t\tcomponent='legend'\n\t\t\t\t\t\tstyle={{ color: 'black', fontSize: '16pt' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{index + 1}) {data.questions[index]}\n\t\t\t\t\t</FormLabel>\n\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\taria-label='quiz'\n\t\t\t\t\t\tname='quiz'\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={handleRadioChange}\n\t\t\t\t\t\tstyle={{ marginTop: '15px' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{data.choices[index].map((el) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\tvalue={el}\n\t\t\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\t\t\tlabel={el}\n\t\t\t\t\t\t\t\t\tstyle={{ marginTop: '8px' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</RadioGroup>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t>\n\t\t\t\t\t\tnext\n\t\t\t\t\t</Button>\n\t\t\t\t</FormControl>\n\t\t\t</form>\n\t\t</Paper>\n\t)\n}\n","import React, { useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\n\nimport cert from '../assets/cert'\n\nimport * as jsPDF from 'jspdf'\nimport { saveAs } from 'file-saver'\n\nconst useStyles = makeStyles({\n\troot: {\n\t\tbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n\t\tborder: 0,\n\t\tborderRadius: 3,\n\t\tboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n\t\tcolor: 'white',\n\t\theight: 48,\n\t\tpadding: '0 30px',\n\t},\n})\n\nconst Result = (props) => {\n\tuseEffect(() => {\n\t\tfetch('https://limitless-cliffs-33100.herokuapp.com/add')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {})\n\t\t\t.catch((err) => console.log(err))\n\t}, [])\n\n\tconst classes = useStyles()\n\n\tconst restart = () => {\n\t\tconsole.log('restarted')\n\n\t\tprops.restart()\n\t}\n\n\tconst fail = (\n\t\t<Container>\n\t\t\t<Grid container spacing={3} alignItems='center'>\n\t\t\t\t<Grid item xs={12} style={{ color: 'white' }}>\n\t\t\t\t\t<h1\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tfontSize: '30pt',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tYou scored only {props.state.score} points. Try to get atleast 7 to\n\t\t\t\t\t\tget the certificate.\n\t\t\t\t\t</h1>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<Button onClick={restart} className={classes.root}>\n\t\t\t\t\t\tRe-take quiz now\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Container>\n\t)\n\n\treturn (\n\t\t<>\n\t\t\t{props.state.score < 7 ? (\n\t\t\t\tfail\n\t\t\t) : (\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tfontSize: '30pt',\n\t\t\t\t\t\t\tfontFamily: 'inherit',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tThanks for taking the Quiz\n\t\t\t\t\t</p>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={classes.root}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginTop: '20px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst doc = new jsPDF({ orientation: 'landscape' })\n\t\t\t\t\t\t\tdoc.addImage(cert, 'PNG', 0, 0, 290, 210)\n\t\t\t\t\t\t\tdoc.setFontSize(30)\n\t\t\t\t\t\t\tdoc.setTextColor(0, 0, 0)\n\t\t\t\t\t\t\tdoc.text(props.state.name, 140, 120, null, null, 'center')\n\t\t\t\t\t\t\tsaveAs(doc.output('blob'), 'skct-covid19-quiz.pdf')\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tDownload the certificate\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default Result\n","import React, { useState } from 'react'\nimport './App.css'\n\nimport Home from './components/Home'\nimport Name from './components/Name'\nimport Quiz from './components/Quiz'\nimport Result from './components/Result'\n\nfunction App() {\n\tconst [state, setstate] = useState({\n\t\tstart: false,\n\t\tname: '',\n\t\tscore: 0,\n\t\tfinish: false,\n\t})\n\n\tconst stateHandler = (newstate) => {\n\t\tsetstate((state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...newstate,\n\t\t\t}\n\t\t})\n\t}\n\n\tconsole.log(state)\n\n\tconst restart = () => {\n\t\tsetstate((state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: false,\n\t\t\t\tname: '',\n\t\t\t\tscore: 0,\n\t\t\t\tfinish: false,\n\t\t\t}\n\t\t})\n\t}\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tclassName='App'\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: '100%',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tfontSize: '23pt',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tThis is a testing link. Please visit the official website to take the\n\t\t\t\tquiz.\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\tborderRadius: 3,\n\t\t\t\t\t\tboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\theight: 48,\n\t\t\t\t\t\tpadding: '0 30px',\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\tmarginTop: '12px',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\tdisplay: 'flex'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref='http://bit.ly/skct-covid19-quiz'\n\t\t\t\t\t\tstyle={{ textDecoration: 'none', color: 'white' }}\n\t\t\t\t\t>\n\t\t\t\t\t\tclick here\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}